/** \page tools-simpleci Simple CI Documentation

\section intro Introduction

Simple CI is a simple Continous Integration service using Make-O-Matic build scripts. The Python executable resides in $MOM_SOURCE/tools/simple_ci.py. A simple_ci instance monitors a set of build scripts for changes to the projects, and starts builds for every change. The source code of the simple_ci resides in $MOM_SOURCE/buildcontrol/simple_ci. Master and Slave are the main modules.

simple_ci supports automated updates of the configuration and the Make-O-Matic installation through a repository. The idea is that administrators can change a configuration setting by committing to the repository, and it will automatically be applied on all build machines. For the KDAB setup, all configuration and the start scripts are stored in an own repository. The directory configuration/global contain the machine-global configuration files (think /etc/mom), those are not really used yet. configuration/user contains settings that are supposed to be linked to $HOME/.mom. configuration/startscripts contains the customized start scripts for the simple_ci instances on the different build machines.

\section setup  KDAB's Setup

Make-O-Matic itself does not contain any KDAB specific pieces of code. It provides the generic build script framework. The KDAB setup extends Make-O-Matic by adding specialized plugin classes that implement the KDAB specific product build process, and by adding the configuration settings.

\subsection terminology Terminology

\li Make-O-Matic: The build script framework
\li Autobuild: Setup containing the configuration files for autobuild to work

\section installation Installation

\subsection autobuild_setup Autobuild Setup

Setup should be as follows on each build machine available:
\code
$HOME
`- autobuild/ (create directory if necessary)
`- mom/ (local checkout of Make-O-Matic out from Git repository)
\endcode

$HOME/autobuild can be a repository shared by all build machine, where the build configurations of each machine are saved.

\note Be sure to add $HOME/mom to your PYTHONPATH. Otherwise Make-O-Matic won't find any modules.

\subsection Configuration Files

Every Make-O-Matic build script and tool automatically processes a set of configuration files. The configuration files are regular Python scripts themselves, that get access to the singleton MApplication object of the running program. This object can be compared to QApplication in some ways, and holds a Settings property, through which all settings of the program can be modified. The configuration files are processed in the following order:
\code
# /etc/mom/config.py
# /etc/mom/<hostname>.py
# $HOME/.mom/config.py
# $HOME/.mom/<hostname>.py
\endcode

$HOME/.mom should be a symbolic link to the autobuild/ repository as described above, the files in step 3 and 4 correspond to autobuild/configuration/user/config.py and autobuild/configuration/user/$HOSTNAME.py. This is the reason why the generic config.py files (which are loaded by every script) should only be used for settings common to all machines, and are considered for use by the BOFH team.
The hostname is used to allow the settings of many computers to be stored in the same repository. Also, settings for the different build machines can be separated this way. If unsure about the hostname Python would look for, run a build script with at least debug level 3 (-vvv), and check the first few lines of the output (debug level 3 is actually quite noisy, and should only be used when analyzing problems).

\code
101008-16:41:10 [Settings] DEBUG: Configuration file "/etc/mom/config.py" does not exist, continuing.
101008-16:41:10 [Settings] DEBUG: Configuration file "/etc/mom/silberpfeil.kdab.net.py" does not exist, continuing.
101008-16:41:10 [Settings] DEBUG: Configuration file "/home/mirko/.mom/config.py" does not exist, continuing.
101008-16:41:10 [Settings] DEBUG: Loading configuration file "/home/mirko/.mom/silberpfeil.kdab.net.py"
###-------------------------------------------------------------------------###
|   Hello from Mirko's configuration file.
|  Email recipient: "mirko.boehm@kdab.com"
|      Client name: "silberpfeil.kdab.net"
|  Upload Location: "localhost://Users/mirko/temp"
|          end of configuration file
###-------------------------------------------------------------------------###
101008-16:41:10 [Settings] DEBUG: Configuration file "/home/mirko/.mom/silberpfeil.kdab.net.py" loaded successfully
\endcode

Every tool follows the same pattern, but looks for a directory with the tool's name under the .mom folder. Since the configuration files are regular Python scripts, they can print lines of text, like in the example above. The corresponding configuration file looks like this. It also shows how to access the Settings object:

\code
# Mirko's local Make-O-Matic configuration file
from __future__ import print_function
import sys
from core.Settings import Settings

recipient = 'mirko.boehm@kdab.com'
settings = application.getSettings()
settings.set( Settings.EmailReporterDefaultRecipients, 'mirko.boehm@kdab.com' )
settings.set( Settings.RSyncPublisherUploadLocation, 'localhost://Users/mirko/temp' )
settings.set( Settings.EnvironmentsBaseDir, '/d/AutobuildEnvironments' )
settings.set( Settings.EmailerSmtpServer, 'mail.kdab.com' )

# give some feedback:
text = '''\
###-------------------------------------------------------------------------###
|   Hello from Mirko's configuration file.
|  Email recipient: "{0}"
|      Client name: "{1}"
|  Upload Location: "{2}"
|          end of configuration file
###-------------------------------------------------------------------------###'''.format(
        settings.get( Settings.EmailReporterDefaultRecipients ),
        settings.get( Settings.ScriptClientName ),
        settings.get( Settings.RSyncPublisherUploadLocation, False ) )

print( text, file = sys.stderr )
\endcode

\section using Using Simple CI

\subsection configuration Configuration and Start Script

simple_ci needs to be configured, it needs the correct path and Python path variables set, and a set of build scripts to operate on. To simplify this, and to work on it only once, it is recommended to add a start script to autobuild/configuration/startscripts/$HOSTNAME in the autobuild repository. Here is an example:

\code
#!/bin/sh
. $HOME/mom/autobuild-env.sh
cd autobuild/ci
./mom/tools/simple_ci.py -v -c buildscripts $*
\endcode

Obviously, the script depends on the variables set in the generated shell script mentioned above. The start script might be very similar, but it usually saves time anyway to add them to the repository and commit them. The example shows that the folder containing the build scripts is also part of the configuration, and also stored in the repository.

\subsection running Running Simple CI

To run simple_ci, simply invoke the start script. Here is an example:

\code
mombuilder@celeron-400:~$ ./MOM/Autobuild/configuration/startscripts/celeron-400/start-simple_ci.sh
KDAB Autobuild base directory is /home/mombuilder/MOM
Make-O-Matic added to the PYTHONPATH.
KDAB Autobuild added to the PYTHONPATH.
101008-17:17:47 [Master] DEBUG: debug level is 1
+-+-+-+-+-+-+-+-+-+-+-+-+                     +-+ +-+-+-+-+ +-+-+-+-+
|m|a|k|e|-|o|-|m|a|t|i|c|                     |C| |K|D|A|B| |2|0|1|0|
+-+-+-+-+-+-+-+-+-+-+-+-+                     +-+ +-+-+-+-+ +-+-+-+-+
+-+ +-+-+-+-+-+ +-+ +-+-+-+-+-+ +-+-+-+-+ +-+-+-+-+ +-+-+-+-+-+-+-+-+
|i| |m|4|k|e|s| |u| |n|o|o|b|s| |k|n|o|w| |w|4|z|z| |f|0|0|b|4|r|3|d|
+-+ +-+-+-+-+-+ +-+ +-+-+-+-+-+ +-+-+-+-+ +-+-+-+-+ +-+-+-+-+-+-+-+-+
101008-17:17:47 [Master] DEBUG: running in master mode
101008-17:17:47 [ConsoleLogger] DEBUG: debug level is 1
101008-17:17:47 [Master] DEBUG: *** now starting slave CI process ***
101008-17:17:47 slave [Slave] DEBUG: debug level is 1
101008-17:17:47 slave [ConsoleLogger] DEBUG: debug level is 1
101008-17:17:47 slave [Slave] DEBUG: running in slave mode
101008-17:17:47 slave [Slave] using "buildscripts" as control directory.
101008-17:17:51 slave [Slave] DEBUG: build control: discovering new revisions
101008-17:17:58 slave [BuildStatus] DEBUG: no new revisions found for build script "$BASE/buildscripts/kd-soap.py" (KD SOAP)
101008-17:17:59 slave [BuildStatus] DEBUG: no new revisions found for build script "$BASE/buildscripts/kd-chart.py" (KD Chart)
101008-17:18:00 slave [BuildStatus] DEBUG: no new revisions found for build script "$BASE/buildscripts/kd-tools.py" (KD Tools)
101008-17:18:02 slave [BuildStatus] DEBUG: no new revisions found for build script "$BASE/buildscripts/kd-reports.py" (KD Reports)
101008-17:18:03 slave [BuildStatus] DEBUG: no new revisions found for build script "$BASE/buildscripts/make-o-matic.py" (Make-O-Matic)
101008-17:18:03 slave [Slave] DEBUG: build control: performing up to 8 builds for new revisions
101008-17:18:03 slave [BuildStatus] DEBUG: build queue is empty.
101008-17:18:03 slave [Slave] DEBUG: sleeping for 300 seconds.^C
101008-17:18:36 slave [Slave] Interrupted. Have a nice day.
101008-17:18:36 [Master] DEBUG: *** slave finished with exit code 2. ***
101008-17:18:36 [Master] DEBUG: short break of 5 seconds^C
101008-17:18:37 [Master] Interrupted. Have a nice day.
\endcode

When simple_ci is run for the first time, it will stores the latest revision that changed the project, for every build script handed to it. It will then monitor the repositories, and if a revision is seen in the repository that has been committed after the last known one, a build job is started for it. It will simply invoke the build scripts with the right arguments, and remember which revisions have already been built.

*/

// vim:ts=4:sw=4:expandtab:filetype=doxygen
